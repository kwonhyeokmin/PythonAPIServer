import cv2
import numpy as np
import math
import base64
from imageio import imread
import io
import ast

C_RATE = 0.0001

def contourApproximation(file):
    # reconstruct image as an numpy array
    img = imread(io.BytesIO(base64.b64decode(file)))

    gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    canny = cv2.Canny(gray_img, 100, 200)
    (_, cnts, _) = cv2.findContours(canny, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
    contours = sorted(cnts, key=cv2.contourArea, reverse=True)[:5]
    cnt = contours[0]
    perimeter = int(cv2.arcLength(cnt, True))
    epsilon = C_RATE * perimeter
    epsilon = epsilon / math.log(epsilon)
    if epsilon < 4:
        epsilon = 4
    approx = cv2.approxPolyDP(cnt, epsilon, True)

    return approx.flatten()


def make_mask(width, height, point_json, mask_color, name):
    point = ast.literal_eval(point_json)

    img = np.zeros((height, width, 3), np.uint8)
    img2 = np.zeros((height, width, 3), np.uint8)

    mask_color = ast.literal_eval("[{}]".format(mask_color))

    point_root = np.array(point['root'], np.int32).reshape((-1, 1, 2))
    cv2.fillPoly(img, [point_root], mask_color[:3])

    for i in range(len(point['add'])):
        point_add = np.array((point['add'][str(i)]), np.int32).reshape((-1, 1, 2))
        cv2.fillPoly(img, [point_add], mask_color[:3])

    for i in range(len(point['del'])):
        point_del = np.array((point['del'][str(i)]), np.int32).reshape((-1, 1, 2))
        cv2.fillPoly(img2, [point_del], mask_color[:3])

    img = img - img2
    b_channel, g_channel, r_channel = cv2.split(img)
    alpha_channel = np.ones(b_channel.shape, dtype=b_channel.dtype) * mask_color[
        3]  # creating a dummy alpha channel image.
    img_BGRA = cv2.merge((b_channel, g_channel, r_channel, alpha_channel))

    retval, buffer = cv2.imencode('.png', img_BGRA)
    result = base64.b64encode(buffer)

    # img = imread(io.BytesIO(base64.b64decode(result)))
    # cv2.imwrite(name + ".png", img)
    return result


if __name__ == "__main__":
    sample = ['{"add":{"0":[51.066650390625,846.149981689453,33.066650390625,852.149981689453,18.666650390624998,852.149981689453,11.466650390625,878.5499816894531,7.866650390625,908.5499816894531,9.066650390625,920.5499816894531,27.066650390625,896.5499816894531,34.266650390624996,882.149981689453,42.666650390625,871.3499816894531,48.666650390625,858.149981689453]},"object_no":3,"root":[25.866650390625,415.3499816894531,137.466650390625,440.5499816894531,137.466650390625,477.7499816894531,147.066650390625,517.3499816894531,151.86665039062498,600.149981689453,149.466650390625,675.7499816894531,131.466650390625,748.9499816894531,118.26665039062499,790.9499816894531,83.46665039062499,817.3499816894531,19.866650390625,847.3499816894531,11.466650390625,418.9499816894531],"name":"head","del":{"0":[142.266650390625,727.3499816894531,97.866650390625,728.5499816894531,73.866650390625,734.5499816894531,43.866650390625,746.5499816894531,25.866650390625,754.9499816894531,9.066650390625,776.5499816894531,10.266650390625,820.9499816894531,27.066650390625,830.5499816894531,70.266650390625,824.5499816894531,97.866650390625,794.5499816894531,121.866650390625,752.5499816894531,131.466650390625,738.149981689453]}}',
              '{"add":{},"object_no":4,"root":[643.866650390625,538.9499816894531,610.2666503906249,567.7499816894531,612.666650390625,640.9499816894531,652.2666503906249,662.5499816894531,666.666650390625,646.9499816894531,678.666650390625,592.9499816894531,672.666650390625,554.5499816894531,652.2666503906249,538.9499816894531],"name":"face","del":{}}',
              '{"add":{},"object_no":13,"root":[475.86665039062495,562.9499816894531,421.866650390625,604.9499816894531,424.266650390625,636.149981689453,424.266650390625,652.9499816894531,389.466650390625,698.5499816894531,384.66665039062497,746.5499816894531,400.266650390625,777.7499816894531,436.266650390625,789.7499816894531,472.266650390625,777.7499816894531,484.266650390625,764.5499816894531,481.86665039062495,799.3499816894531,539.466650390625,804.149981689453,591.066650390625,765.7499816894531,597.066650390625,726.149981689453,591.066650390625,705.7499816894531,568.2666503906249,657.7499816894531,543.066650390625,630.149981689453,522.666650390625,604.9499816894531,496.266650390625,564.149981689453],"name":"person","del":{"0":[585.066650390625,801.7499816894531,546.666650390625,808.9499816894531,517.866650390625,819.7499816894531,520.2666503906249,849.7499816894531,538.2666503906249,865.3499816894531,586.2666503906249,891.7499816894531,649.866650390625,902.5499816894531,673.866650390625,890.5499816894531,701.466650390625,871.3499816894531,684.666650390625,838.9499816894531,658.2666503906249,820.9499816894531,613.866650390625,807.7499816894531,598.2666503906249,804.149981689453]}}']
    width = 720
    height = 960
    for i, p in enumerate(sample):
        print(make_mask(width, height, p, "255, 255, 0, 200", str(i)))
